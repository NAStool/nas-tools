name: Nas-tools Build-1
on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - version.py
      - .github/workflows/build.yml

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: Get the tags from the jxxghp/nas-tools
      run: |
        mkdir jxxghp
        cd jxxghp
        git clone https://github.com/jxxghp/nas-tools.git
        cd nas-tools
        app_version=$(cat version.py |sed -ne "s/APP_VERSION\s=\s'v\(.*\)'/\1/gp")
        echo "app_version=$app_version" >> $GITHUB_ENV
        git log v${app_version}^..HEAD --pretty=format:%an"  "%cd"   "%B > ../../../commit.txt #显示版本到现在的所有提交信息到commit.txt 

    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Release version and last commit
      id: release_version
      run: |
        app_version=$(cat version.py |sed -ne "s/APP_VERSION\s=\s'v\(.*\)'/\1/gp")
        echo "app_version=$app_version" >> $GITHUB_ENV
        # git log HEAD^ -1 --format=%B > commit.txt #显示最新的提交信息到commit.txt
        # git log v${app_version}^..HEAD^ --pretty=format:%an"  "%cd"   "%B > commit.txt #显示版本到现在的所有提交信息到commit.txt,只有在merge-upstream后才能正常显示
        cp ../commit.txt ./
        # cat commit.txt
        # rm -rf jxxghp          checkout 时直接会删除之前的所有内容

    # - name: Setup Debug Session
    #   uses: csexton/debugger-action@master
    - name: Create release
      id: create_release
      uses: GongT/actions-recreate-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.app_version }}
        release_name: v${{ env.app_version }}
        # body: ${{ last_commit }}
        body_path: commit.txt
        draft: false
        prerelease: false
        
   # - name: Setup Debug Session
     # uses: csexton/debugger-action@master
        
    - name: output release_informations
      run: |
        echo "${{ steps.create_release.outputs.id }}" > release_id.txt
        echo "${{ env.app_version }}" > app_version.txt
    - name: save release_informations
      uses: actions/upload-artifact@v3
      with:
        name: release_informations
        path: |
          release_id.txt
          app_version.txt

  synology-build:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: download release_informations
      uses: actions/download-artifact@v3
    - name: get app_version
      shell: bash
      run: |
        value=`cat release_informations/app_version.txt`
        echo "app_version=$value" >> $GITHUB_ENV
    - name: Build the synology spk
      run: |
        git clone --depth=1 https://github.com/jxxghp/nas-tools --recurse-submodule
        cd nas-tools
        cp -r synology/ui synology/wheelhouse ./
        sed -i 's/3000/3003/g' config/config.yaml
        sed -i 's/\/config\/logs/\/var\/packages\/nastool\/target\/config\/logs/g' config/config.yaml
        tar -zcvf package.tgz *.py *.txt web/ ui/ wheelhouse/ config/
        mkdir spk6
        cp -r package.tgz synology/dsm6/conf synology/dsm6/scripts/ synology/dsm6/INFO synology/CHANGELOG synology/*.PNG synology/*.asc spk6/
        cd spk6/
        chmod 777 scripts/*
        sed -i 's/NASTOOL_VERSION/${{ env.app_version }}/g' INFO
        tar -cvf nastool_dsm6.spk *
        cd ..
        rm -f package.tgz
        tar -zcvf package.tgz *.py *.txt web/ ui/ wheelhouse/ config/
        mkdir spk7
        cp -r package.tgz synology/dsm7/conf synology/dsm7/scripts/ synology/dsm7/INFO synology/CHANGELOG synology/*.PNG synology/*.asc spk7/
        cd spk7/
        chmod 777 scripts/*
        sed -i 's/NASTOOL_VERSION/${{ env.app_version }}/g' INFO
        tar -cvf nastool_dsm7.spk *
        cd ..
        mkdir spks
        mv spk6/nastool_dsm6.spk spk7/nastool_dsm7.spk spks/
    - name: upload synology files
      uses: actions/upload-artifact@v3
      with:
        name: synology
        path: /home/runner/work/nas-tools/nas-tools/nas-tools/spks/
        
  windows-build:
    runs-on: windows-latest
    needs: create-release
    steps:
    - name: init Python 3.10.6
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.6'
    - name: install dependent packages
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        pip install numpy
        pip install railroad
        pip install pyparsing
        pip install wxpython
        pip install pyinstaller
        git clone https://github.com/jxxghp/nas-tools
        cd nas-tools
        pip install -r requirements.txt
    - name: package through pyinstaller
      run:
        cd nas-tools &&
        copy .\windows\rely\upx.exe c:\hostedtoolcache\windows\python\3.10.6\x64\Scripts &&
        copy .\windows\rely\hook-cn2an.py c:\hostedtoolcache\windows\python\3.10.6\x64\lib\site-packages\pyinstaller\hooks &&
        copy .\windows\rely\hook-zhconv.py c:\hostedtoolcache\windows\python\3.10.6\x64\lib\site-packages\pyinstaller\hooks &&
        copy .\windows\rely\template.jinja2 c:\hostedtoolcache\windows\Python\3.10.6\x64\lib\site-packages\setuptools\_vendor\pyparsing\diagram &&
        xcopy .\web c:\hostedtoolcache\windows\python\3.10.6\x64\lib\site-packages\web\ /e &&
        xcopy .\config c:\hostedtoolcache\windows\python\3.10.6\x64\lib\site-packages\config\ /e &&
        cd windows &&
        pyinstaller nas-tools.spec /
    - name: upload windows file
      uses: actions/upload-artifact@v3
      with:
        name: windows
        path: D:/a/nas-tools/nas-tools/nas-tools/windows/dist/nas-tools.exe

  Send-message:
    runs-on: ubuntu-latest
    needs: [synology-build, windows-build]
    steps:
    - name: download release_informations
      uses: actions/download-artifact@v3
    - name: get release_informations
      shell: bash
      run: |
        value=`cat release_informations/release_id.txt`
        echo "release_id=$value" >> $GITHUB_ENV
        value=`cat release_informations/app_version.txt`
        echo "app_version=$value" >> $GITHUB_ENV
    - name: rename
      shell: bash
      run: |
        mkdir releases
        cd synology
        mv nastool_dsm6.spk /home/runner/work/nas-tools/nas-tools/releases/nastool_dsm_6.x_v${{ env.app_version }}.spk
        mv nastool_dsm7.spk /home/runner/work/nas-tools/nas-tools/releases/nastool_dsm_7.x_v${{ env.app_version }}.spk
        cd ../windows
        mv nas-tools.exe /home/runner/work/nas-tools/nas-tools/releases/nas-tools_v${{ env.app_version }}.exe
    - name: Upload release asset
      uses: dwenegar/upload-release-assets@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ env.release_id }}
        assets_path: |
            /home/runner/work/nas-tools/nas-tools/releases/
  #   - name: Send telegram message (release informations)
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
  #       format: markdown
  #       message: |
  #           *v${{ env.app_version }}*

  #           ${{ github.event.commits[0].message }}
  #   - name: Send telegram message synology 1
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
  #       document: /home/runner/work/nas-tools/nas-tools/releases/nastool_dsm_6.x_v${{ env.app_version }}.spk
  #   - name: Send telegram message synology 2
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
  #       document: /home/runner/work/nas-tools/nas-tools/releases/nastool_dsm_7.x_v${{ env.app_version }}.spk
  #   - name: Send telegram message windows
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
  #       document: /home/runner/work/nas-tools/nas-tools/releases/nas-tools_v${{ env.app_version }}.exe
