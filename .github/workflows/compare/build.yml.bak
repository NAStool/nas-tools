name: Nas-tools Build
on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - version.py
      - .github/workflows/build.yml

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Release version
      id: release_version
      run: |
        app_version=$(cat version.py |sed -ne "s/APP_VERSION\s=\s'v\(.*\)'/\1/gp")
        echo "app_version=$app_version" >> $GITHUB_ENV
    - name: Create release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.app_version }}
        release_name: v${{ env.app_version }}
        body: ${{ github.event.commits[0].message }}
        draft: false
        prerelease: false
    - name: output release_informations
      run: |
        echo "${{ steps.create_release.outputs.id }}" > release_id.txt
        echo "${{ env.app_version }}" > app_version.txt
    - name: save release_informations
      uses: actions/upload-artifact@v3
      with:
        name: release_informations
        path: |
          release_id.txt
          app_version.txt

  windows-build:
    runs-on: windows-latest
    needs: create-release
    steps:
    - name: init Python 3.10.6
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.6'
    - name: install dependent packages
      run: |
        python -m pip install --upgrade pip
        pip install wheel numpy railroad pyparsing wxpython pyinstaller
        git clone --depth=1 https://github.com/jxxghp/nas-tools --recurse-submodule
        cd nas-tools
        pip install -r requirements.txt
        pip install -r third_party.txt
        pip uninstall -y -r third_party.txt
    - name: package through pyinstaller
      run:
        cd nas-tools &&
        copy .\windows\rely\upx.exe c:\hostedtoolcache\windows\python\3.10.6\x64\Scripts &&
        copy .\windows\rely\hook-cn2an.py c:\hostedtoolcache\windows\python\3.10.6\x64\lib\site-packages\pyinstaller\hooks &&
        copy .\windows\rely\hook-zhconv.py c:\hostedtoolcache\windows\python\3.10.6\x64\lib\site-packages\pyinstaller\hooks &&
        copy .\windows\rely\template.jinja2 c:\hostedtoolcache\windows\Python\3.10.6\x64\lib\site-packages\setuptools\_vendor\pyparsing\diagram &&
        xcopy .\web c:\hostedtoolcache\windows\python\3.10.6\x64\lib\site-packages\web\ /e &&
        xcopy .\config c:\hostedtoolcache\windows\python\3.10.6\x64\lib\site-packages\config\ /e &&
        cd windows &&
        pyinstaller nas-tools.spec /
    - name: upload windows file
      uses: actions/upload-artifact@v3
      with:
        name: windows
        path: D:/a/nas-tools/nas-tools/nas-tools/windows/dist/nas-tools.exe

  Send-message:
    runs-on: ubuntu-latest
    needs: [windows-build]
    steps:
    - name: download release_informations
      uses: actions/download-artifact@v3
    - name: get release_informations
      shell: bash
      run: |
        value=`cat release_informations/release_id.txt`
        echo "release_id=$value" >> $GITHUB_ENV
        value=`cat release_informations/app_version.txt`
        echo "app_version=$value" >> $GITHUB_ENV
    - name: rename
      shell: bash
      run: |
        mkdir releases
        cd windows
        mv nas-tools.exe /home/runner/work/nas-tools/nas-tools/releases/nastool_win_v${{ env.app_version }}.exe
    - name: Upload release asset
      uses: dwenegar/upload-release-assets@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ env.release_id }}
        assets_path: |
            /home/runner/work/nas-tools/nas-tools/releases/
    - name: Send telegram message (release informations)
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: markdown
        message: |
            *v${{ env.app_version }}*

            ${{ github.event.commits[0].message }}
    - name: Send telegram message windows
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        document: /home/runner/work/nas-tools/nas-tools/releases/nastool_win_v${{ env.app_version }}.exe